PixelFormat
ÏñËØ¸ñÊ½



GDI+
~~~~

// #include "GdiplusPixelFormats.h"

typedef DWORD ARGB;
typedef DWORDLONG ARGB64;

#define ALPHA_SHIFT 24
#define RED_SHIFT   16
#define GREEN_SHIFT 8
#define BLUE_SHIFT  0
#define ALPHA_MASK  ((ARGB) 0xff << ALPHA_SHIFT)

// In-memory pixel data formats:
// bits 0-7 = format index
// bits 8-15 = pixel size (in bits)
// bits 16-23 = flags
// bits 24-31 = reserved

typedef INT PixelFormat;

#define    PixelFormatIndexed      0x00010000 // Indexes into a palette
#define    PixelFormatGDI          0x00020000 // Is a GDI-supported format
#define    PixelFormatAlpha        0x00040000 // Has an alpha component
#define    PixelFormatPAlpha       0x00080000 // Pre-multiplied alpha
#define    PixelFormatExtended     0x00100000 // Extended color 16 bits/channel
#define    PixelFormatCanonical    0x00200000 

#define    PixelFormatUndefined       0
#define    PixelFormatDontCare        0

#define    PixelFormat1bppIndexed     (1 | ( 1 << 8) | PixelFormatIndexed | PixelFormatGDI)
#define    PixelFormat4bppIndexed     (2 | ( 4 << 8) | PixelFormatIndexed | PixelFormatGDI)
#define    PixelFormat8bppIndexed     (3 | ( 8 << 8) | PixelFormatIndexed | PixelFormatGDI)
#define    PixelFormat16bppGrayScale  (4 | (16 << 8) | PixelFormatExtended)
#define    PixelFormat16bppRGB555     (5 | (16 << 8) | PixelFormatGDI)
#define    PixelFormat16bppRGB565     (6 | (16 << 8) | PixelFormatGDI)
#define    PixelFormat16bppARGB1555   (7 | (16 << 8) | PixelFormatAlpha | PixelFormatGDI)
#define    PixelFormat24bppRGB        (8 | (24 << 8) | PixelFormatGDI)
#define    PixelFormat32bppRGB        (9 | (32 << 8) | PixelFormatGDI)
#define    PixelFormat32bppARGB       (10 | (32 << 8) | PixelFormatAlpha | PixelFormatGDI | PixelFormatCanonical)
#define    PixelFormat32bppPARGB      (11 | (32 << 8) | PixelFormatAlpha | PixelFormatPAlpha | PixelFormatGDI)
#define    PixelFormat48bppRGB        (12 | (48 << 8) | PixelFormatExtended)
#define    PixelFormat64bppARGB       (13 | (64 << 8) | PixelFormatAlpha  | PixelFormatCanonical | PixelFormatExtended)
#define    PixelFormat64bppPARGB      (14 | (64 << 8) | PixelFormatAlpha  | PixelFormatPAlpha | PixelFormatExtended)
#define    PixelFormatMax             15

inline UINT
GetPixelFormatSize(
                   PixelFormat pixfmt
    )
{
    return (pixfmt >> 8) & 0xff;
}

inline BOOL
IsIndexedPixelFormat(
                     PixelFormat pixfmt
    )
{
    return (pixfmt & PixelFormatIndexed) != 0;
}

inline BOOL
IsAlphaPixelFormat(
                     PixelFormat pixfmt
)
{
   return (pixfmt & PixelFormatAlpha) != 0;
}

inline BOOL
IsExtendedPixelFormat(
                     PixelFormat pixfmt
    )
{
   return (pixfmt & PixelFormatExtended) != 0;
}

//--------------------------------------------------------------------------
// Determine if the Pixel Format is Canonical format:
//   PixelFormat32bppARGB
//   PixelFormat32bppPARGB
//   PixelFormat64bppARGB
//   PixelFormat64bppPARGB
//--------------------------------------------------------------------------

inline BOOL
IsCanonicalPixelFormat(
                     PixelFormat pixfmt
    )
{
   return (pixfmt & PixelFormatCanonical) != 0;
}

enum PaletteFlags
{
    PaletteFlagsHasAlpha    = 0x0001,
    PaletteFlagsGrayScale   = 0x0002,
    PaletteFlagsHalftone    = 0x0004
};

struct ColorPalette
{
public:
    UINT Flags;             // Palette flags
    UINT Count;             // Number of color entries
    ARGB Entries[1];        // Palette color entries
};



DirectX
~~~~~~~

// #include "ddraw.h"

#ifndef MAKEFOURCC
    #define MAKEFOURCC(ch0, ch1, ch2, ch3)                              \
                ((DWORD)(BYTE)(ch0) | ((DWORD)(BYTE)(ch1) << 8) |   \
                ((DWORD)(BYTE)(ch2) << 16) | ((DWORD)(BYTE)(ch3) << 24 ))
#endif //defined(MAKEFOURCC)

/*
 * FOURCC codes for DX compressed-texture pixel formats
 */
#define FOURCC_DXT1  (MAKEFOURCC('D','X','T','1'))
#define FOURCC_DXT2  (MAKEFOURCC('D','X','T','2'))
#define FOURCC_DXT3  (MAKEFOURCC('D','X','T','3'))
#define FOURCC_DXT4  (MAKEFOURCC('D','X','T','4'))
#define FOURCC_DXT5  (MAKEFOURCC('D','X','T','5'))

/*
 * Generic pixel format with 8-bit RGB and alpha components
 */
typedef struct _DDARGB
{
    BYTE blue;
    BYTE green;
    BYTE red;
    BYTE alpha;
} DDARGB;

typedef DDARGB FAR *LPDDARGB;

/*
 * This version of the structure remains for backwards source compatibility.
 * The DDARGB structure is the one that should be used for all DirectDraw APIs.
 */
typedef struct _DDRGBA
{
    BYTE red;
    BYTE green;
    BYTE blue;
    BYTE alpha;
} DDRGBA;

typedef DDRGBA FAR *LPDDRGBA;


/*
 * DDPIXELFORMAT
 */
typedef struct _DDPIXELFORMAT
{
    DWORD       dwSize;                 // size of structure
    DWORD       dwFlags;                // pixel format flags
    DWORD       dwFourCC;               // (FOURCC code)
    union
    {
        DWORD   dwRGBBitCount;          // how many bits per pixel
        DWORD   dwYUVBitCount;          // how many bits per pixel
        DWORD   dwZBufferBitDepth;      // how many total bits/pixel in z buffer (including any stencil bits)
        DWORD   dwAlphaBitDepth;        // how many bits for alpha channels
        DWORD   dwLuminanceBitCount;    // how many bits per pixel
        DWORD   dwBumpBitCount;         // how many bits per "buxel", total
        DWORD   dwPrivateFormatBitCount;// Bits per pixel of private driver formats. Only valid in texture
                                        // format list and if DDPF_D3DFORMAT is set
    } DUMMYUNIONNAMEN(1);
    union
    {
        DWORD   dwRBitMask;             // mask for red bit
        DWORD   dwYBitMask;             // mask for Y bits
        DWORD   dwStencilBitDepth;      // how many stencil bits (note: dwZBufferBitDepth-dwStencilBitDepth is total Z-only bits)
        DWORD   dwLuminanceBitMask;     // mask for luminance bits
        DWORD   dwBumpDuBitMask;        // mask for bump map U delta bits
        DWORD   dwOperations;           // DDPF_D3DFORMAT Operations
    } DUMMYUNIONNAMEN(2);
    union
    {
        DWORD   dwGBitMask;             // mask for green bits
        DWORD   dwUBitMask;             // mask for U bits
        DWORD   dwZBitMask;             // mask for Z bits
        DWORD   dwBumpDvBitMask;        // mask for bump map V delta bits
        struct
        {
            WORD    wFlipMSTypes;       // Multisample methods supported via flip for this D3DFORMAT
            WORD    wBltMSTypes;        // Multisample methods supported via blt for this D3DFORMAT
        } MultiSampleCaps;

    } DUMMYUNIONNAMEN(3);
    union
    {
        DWORD   dwBBitMask;             // mask for blue bits
        DWORD   dwVBitMask;             // mask for V bits
        DWORD   dwStencilBitMask;       // mask for stencil bits
        DWORD   dwBumpLuminanceBitMask; // mask for luminance in bump map
    } DUMMYUNIONNAMEN(4);
    union
    {
        DWORD   dwRGBAlphaBitMask;      // mask for alpha channel
        DWORD   dwYUVAlphaBitMask;      // mask for alpha channel
        DWORD   dwLuminanceAlphaBitMask;// mask for alpha channel
        DWORD   dwRGBZBitMask;          // mask for Z channel
        DWORD   dwYUVZBitMask;          // mask for Z channel
    } DUMMYUNIONNAMEN(5);
} DDPIXELFORMAT;

typedef DDPIXELFORMAT FAR* LPDDPIXELFORMAT;


/****************************************************************************
 *
 * DIRECTDRAW PIXELFORMAT FLAGS
 *
 ****************************************************************************/

/*
 * The surface has alpha channel information in the pixel format.
 */
#define DDPF_ALPHAPIXELS                        0x00000001l

/*
 * The pixel format contains alpha only information
 */
#define DDPF_ALPHA                              0x00000002l

/*
 * The FourCC code is valid.
 */
#define DDPF_FOURCC                             0x00000004l

/*
 * The surface is 4-bit color indexed.
 */
#define DDPF_PALETTEINDEXED4                    0x00000008l

/*
 * The surface is indexed into a palette which stores indices
 * into the destination surface's 8-bit palette.
 */
#define DDPF_PALETTEINDEXEDTO8                  0x00000010l

/*
 * The surface is 8-bit color indexed.
 */
#define DDPF_PALETTEINDEXED8                    0x00000020l

/*
 * The RGB data in the pixel format structure is valid.
 */
#define DDPF_RGB                                0x00000040l

/*
 * The surface will accept pixel data in the format specified
 * and compress it during the write.
 */
#define DDPF_COMPRESSED                         0x00000080l

/*
 * The surface will accept RGB data and translate it during
 * the write to YUV data.  The format of the data to be written
 * will be contained in the pixel format structure.  The DDPF_RGB
 * flag will be set.
 */
#define DDPF_RGBTOYUV                           0x00000100l

/*
 * pixel format is YUV - YUV data in pixel format struct is valid
 */
#define DDPF_YUV                                0x00000200l

/*
 * pixel format is a z buffer only surface
 */
#define DDPF_ZBUFFER                            0x00000400l

/*
 * The surface is 1-bit color indexed.
 */
#define DDPF_PALETTEINDEXED1                    0x00000800l

/*
 * The surface is 2-bit color indexed.
 */
#define DDPF_PALETTEINDEXED2                    0x00001000l

/*
 * The surface contains Z information in the pixels
 */
#define DDPF_ZPIXELS                            0x00002000l

/*
 * The surface contains stencil information along with Z
 */
#define DDPF_STENCILBUFFER                      0x00004000l

/*
 * Premultiplied alpha format -- the color components have been
 * premultiplied by the alpha component.
 */
#define DDPF_ALPHAPREMULT                       0x00008000l


/*
 * Luminance data in the pixel format is valid.
 * Use this flag for luminance-only or luminance+alpha surfaces,
 * the bit depth is then ddpf.dwLuminanceBitCount.
 */
#define DDPF_LUMINANCE                          0x00020000l

/*
 * Luminance data in the pixel format is valid.
 * Use this flag when hanging luminance off bumpmap surfaces,
 * the bit mask for the luminance portion of the pixel is then
 * ddpf.dwBumpLuminanceBitMask
 */
#define DDPF_BUMPLUMINANCE                      0x00040000l

/*
 * Bump map dUdV data in the pixel format is valid.
 */
#define DDPF_BUMPDUDV                           0x00080000l






OpenGL
~~~~~~

// #include "WinGDI.h"

typedef struct tagPIXELFORMATDESCRIPTOR { // pfd   
  WORD  nSize; 
  WORD  nVersion; 
  DWORD dwFlags; 
  BYTE  iPixelType; 
  BYTE  cColorBits; 
  BYTE  cRedBits; 
  BYTE  cRedShift; 
  BYTE  cGreenBits; 
  BYTE  cGreenShift; 
  BYTE  cBlueBits; 
  BYTE  cBlueShift; 
  BYTE  cAlphaBits; 
  BYTE  cAlphaShift; 
  BYTE  cAccumBits; 
  BYTE  cAccumRedBits; 
  BYTE  cAccumGreenBits; 
  BYTE  cAccumBlueBits; 
  BYTE  cAccumAlphaBits; 
  BYTE  cDepthBits; 
  BYTE  cStencilBits; 
  BYTE  cAuxBuffers; 
  BYTE  iLayerType; 
  BYTE  bReserved; 
  DWORD dwLayerMask; 
  DWORD dwVisibleMask; 
  DWORD dwDamageMask; 
} PIXELFORMATDESCRIPTOR; 


/* pixel types */
#define PFD_TYPE_RGBA        0
#define PFD_TYPE_COLORINDEX  1

/* layer types */
#define PFD_MAIN_PLANE       0
#define PFD_OVERLAY_PLANE    1
#define PFD_UNDERLAY_PLANE   (-1)

/* PIXELFORMATDESCRIPTOR flags */
#define PFD_DOUBLEBUFFER            0x00000001
#define PFD_STEREO                  0x00000002
#define PFD_DRAW_TO_WINDOW          0x00000004
#define PFD_DRAW_TO_BITMAP          0x00000008
#define PFD_SUPPORT_GDI             0x00000010
#define PFD_SUPPORT_OPENGL          0x00000020
#define PFD_GENERIC_FORMAT          0x00000040
#define PFD_NEED_PALETTE            0x00000080
#define PFD_NEED_SYSTEM_PALETTE     0x00000100
#define PFD_SWAP_EXCHANGE           0x00000200
#define PFD_SWAP_COPY               0x00000400
#define PFD_SWAP_LAYER_BUFFERS      0x00000800
#define PFD_GENERIC_ACCELERATED     0x00001000
#define PFD_SUPPORT_DIRECTDRAW      0x00002000

/* PIXELFORMATDESCRIPTOR flags for use in ChoosePixelFormat only */
#define PFD_DEPTH_DONTCARE          0x20000000
#define PFD_DOUBLEBUFFER_DONTCARE   0x40000000
#define PFD_STEREO_DONTCARE         0x80000000


WINGDIAPI int   WINAPI ChoosePixelFormat( __in HDC hdc, __in CONST PIXELFORMATDESCRIPTOR *ppfd);

WINGDIAPI int  WINAPI DescribePixelFormat(  __in HDC hdc, 
                                            __in int iPixelFormat, 
                                            __in UINT nBytes,
                                            __out_bcount_opt(nBytes) LPPIXELFORMATDESCRIPTOR ppfd);

WINGDIAPI UINT  WINAPI GetEnhMetaFilePixelFormat(   __in HENHMETAFILE hemf,
                                                    __in UINT cbBuffer,
                                                    __out_bcount_opt(cbBuffer) PIXELFORMATDESCRIPTOR *ppfd);

WINGDIAPI int   WINAPI GetPixelFormat( __in HDC hdc);

WINGDIAPI BOOL  WINAPI SetPixelFormat(__in HDC hdc, __in int format, __in CONST PIXELFORMATDESCRIPTOR * ppfd);

BOOL SwapBuffers(
  HDC  hdc  // device context whose buffers get swapped
);



me
~~


typedef struct tagPIXELFORMATDESC { // pfd   
  BYTE  nSize;  	// Version¡£ÏÖÎª0x10
  BYTE  cPixelBits; 	// pixel bits. ÏñËØµÄÎ»¿í¡£Èç15Î»É«Ò²ÊÇÕ¼16Î»¿Õ¼ä¡£ÓÐÐ§Öµ£º1,2,4,8,16,24,32,48,64£¨,96,128,192,255£¨ÊµÎª256£©£©
  BYTE  nColorType;	// É«²ÊÀàÐÍ
  BYTE  nChannelType;	// ÑÕÉ«Í¨µÀÀàÐÍ
  DWORD dwFourCC;	// FOURCC´úÂë¡£Îª0±íÊ¾ÎÞÐ§
  BYTE  nC0Bits;	// B. Í¨µÀ0 ËùÎ»¿í
  BYTE  nC0Shift;	// B. Í¨µÀ0 µÄÎ»ÒÆ¡£´ÓµÍÎ»ÊýÆð£¬ÈçA1R5G5B5ÖÐB·ÖÁ¿µÄÎ»ÒÆÎª0
  BYTE  nC1Bits;	// G. Í¨µÀ1 ËùÎ»¿í
  BYTE  nC1Shift;	// G. Í¨µÀ1 µÄÎ»ÒÆ¡£´ÓµÍÎ»ÊýÆð£¬ÈçA1R5G5B5ÖÐG·ÖÁ¿µÄÎ»ÒÆÎª5
  BYTE  nC2Bits;	// R. Í¨µÀ2 ËùÎ»¿í
  BYTE  nC2Shift;	// R. Í¨µÀ2 µÄÎ»ÒÆ¡£´ÓµÍÎ»ÊýÆð£¬ÈçA1R5G5B5ÖÐR·ÖÁ¿µÄÎ»ÒÆÎª10
  BYTE  nC3Bits;	// A. Í¨µÀ3 µÄÎ»¿í¡£4¸öÍ¨µÀÎ»¿íÖ®ºÍ±ØÐëµÈÓÚcPixelBits£¬¼È±ØÐëÂ¼Èë±£ÁôÎ»£¨»òAlpha£©¡£
  BYTE  nC3Shift;	// A. Í¨µÀ3 µÄÎ»ÒÆ¡£´ÓµÍÎ»ÊýÆð£¬ÈçA1R5G5B5ÖÐA·ÖÁ¿µÄÎ»ÒÆÎª15
} PIXELFORMATDESC; 


// nColorType C0123
// ----------  ----
// 0)FourCC    0000
// 1)Indexed   IA00
// 2)Gray      YA00
// 3)RGB       BGRA
// 4)YUV       VUYA
// 5)CMYK      KYMC

#define PIXEL_COLORTYPE_FourCC  0	// ½ö¸ù¾Ý dwFourCC¡£cPixelBits: 0
#define PIXEL_COLORTYPE_Indexed 1	// Ë÷ÒýÉ«¡£cPixelBits: 1,2,4,8
#define PIXEL_COLORTYPE_Gray    2	// »Ò¶ÈÉ«¡£cPixelBits: 1,2,4,8£¨,16£©
#define PIXEL_COLORTYPE_RGB     3	// RGBÄ£Ê½¡£×¢ÒâC0~3·Ö±ðÎªBGRA¡£cPixelBits: 16,24,32,48,64£¨,96,128,192,255£©
#define PIXEL_COLORTYPE_YUV     4	// YUVÄ£Ê½£¨·Ç±ØÐë£©¡£×¢ÒâC0~3·Ö±ðÎªVUYA¡£cPixelBits: 16,24,32,48,64£¨,96,128,192,255£©
#define PIXEL_COLORTYPE_CMYK    5	// CMYKÄ£Ê½£¨·Ç±ØÐë£©¡£×¢ÒâC0~3·Ö±ðÎªKYMC¡£cPixelBits: 32,64£¨128,255£©



// nChannelType

#define PIXEL_CHANNELTYPE_ALPHA  0x80	// AlphaÍ¨µÀÓÐÐ§¡£ÎÞÂÛAlphaÍ¨µÀÊÇ·ñÓÐÐ§£¬¾ùÐèÔÚºóÃæµÄnC3BitsÖÐÌîºÃAlphaÍ¨µÀµÄÎ»¿í¡£
#define PIXEL_CHANNELTYPE_PALPHA 0x40	// Ô¤³ËAlpha±êÖ¾¡£

#define PIXEL_CHANNELTYPE_MASK 0x0F

#define PIXEL_CHANNELTYPE_BASE  0	// »ù±¾ÀàÐÍ¡£cPixelBits: 1,2,4,8,16,24,32
#define PIXEL_CHANNELTYPE_I16   1	// 16Î»ÕûÊýÀàÐÍ£¨·Ç±ØÐë£©¡£cPixelBits: 16,32,48,64
#define PIXEL_CHANNELTYPE_I32   2	// 32Î»ÕûÊýÀàÐÍ£¨·Ç±ØÐë£©¡£cPixelBits: 32,64,96,128
#define PIXEL_CHANNELTYPE_I64   3	// 64Î»ÕûÊýÀàÐÍ£¨·Ç±ØÐë£©¡£cPixelBits: 64,128,192,255
#define PIXEL_CHANNELTYPE____   4	// ±£Áô
#define PIXEL_CHANNELTYPE_F16   5	// 16Î»¸¡µãÀàÐÍ£¨·Ç±ØÐë£©¡£cPixelBits: 16,32,48,64
#define PIXEL_CHANNELTYPE_F32   6	// 32Î»¸¡µãÀàÐÍ£¨·Ç±ØÐë£©¡£cPixelBits: 32,64,96,128
#define PIXEL_CHANNELTYPE_F64   7	// 64Î»¸¡µãÀàÐÍ£¨·Ç±ØÐë£©¡£cPixelBits: 64,128,192,255



typedef DWORD PIXELFORMAT;
// bits 0~7: cColorBits. ÓÐÐ§ÑÕÉ«Î»Êý¡£¼È³ýÁËalphaÍ¨µÀÍâµÄÆäËûÑÕÉ«Í¨µÀÎ»¿íµÄºÏ¼Æ¡£
// bits 8~15: cPixelBits
// bits 16~23: nColorType
// bits 24~31: nChannelType


inline PIXELFORMAT EncodePixelFormat(PIXELFORMATDESC *pfd)
{
	if (pfd==NULL) return 0;
	PIXELFORMAT pf = 0;
	pf = (((PIXELFORMAT)(pfd->cPixelBits)) << 8)
	    |(((PIXELFORMAT)(pfd->nColorType)) << 16)
	    |(((PIXELFORMAT)(pfd->nChannelType)) << 24);
	int n = 0;
	switch(pfd->nColorType)
	{
		PIXEL_COLORTYPE_Indexed:
		PIXEL_COLORTYPE_Gray:
			n = pfd->nC0Bits;
			break;
		PIXEL_COLORTYPE_RGB:
		PIXEL_COLORTYPE_YUV:
			n = (int)(pfd->nC0Bits) + pfd->nC1Bits + pfd->nC2Bits;
			break;
		PIXEL_COLORTYPE_CMYK:
			n = (int)(pfd->nC0Bits) + pfd->nC1Bits + pfd->nC2Bits + pfd->nC3Bits;
			break;
		// else // ²»ÄÜÊ¶±ðµÄÑÕÉ«ÀàÐÍ£¬cColorBitsÖ»ÄÜÎª0
	}
	if (n>0xFF) n=0xFF;
	return pf | (BYTE)n;
}


typedef BOOL (*PIXELPROC)(LPVOID lpDst, LPVOID lpSrc, int cntPixel, PIXELFORMATDESC *pfd, LPVOID lparam);
// cntPixel×î´óÎª2048


ÏñËØÎ»¿íÓëÍ¨µÀÎ»¿íµÄ¹ØÏµÖ»ÄÜÎª£¨¾ùÎªÊ®Áù½øÖÆÊý×Ö£©¡ª¡ª
PB 0B 1B 2B 3B ËµÃ÷
 1  1  0  0  0 »ù´¡
 2  2  0  0  0 »ù´¡
 4  4  0  0  0 »ù´¡
 8  8  0  0  0 »ù´¡
 8  4  4  0  0 Ö»ÓÐ8Î»É«Ä£Ê½ÏÂ²ÅÔÊÐí±£ÁôÎ»£¨»òalpha£©
 8  2  6  0  0
 8  1  7  0  0
10  4  4  4  4 R4G4B4A4
10  5  5  5  1 R5G5B5
10  5  6  5  0 R5G6B5
10  8  8  0  0 X8Y8
18  8  8  8  0 24Î»É«ÏÂÖ»ÔÊÐí8Î»
20  8  8  8  8 R8G8B8
20  A  A  A  2 R10G10B10A2
20 10 10  0  0 X16Y16
30 10 10 10  0 R16G16B16
40 10 10 10 10 R16G16B16A16
40 20 20  0  0 X32Y32
60 20 20 20  0 R32G32B32
80 20 20 20 20 R32G32B32A32
80 40 40  0  0 X64Y64
C0 40 40 40  0 R64G64B64
FF 40 40 40 40 R64G64B64A64
FF 80 80  0  0 X128Y128

×Ü½á£º
1.Ö»ÓÐcPixelBitsÎª8,16,32Ê±²ÅÔÊÐí·Ç8µÄÎ»¿í¡£
2.µ±nChannelType²»ÎªPIXEL_CHANNELTYPE_BASEÊ±£¬nC0BitsµÈÖ»ÄÜÎª16,32,64¡£



³£¼ûÎ»Í¼¸ñÊ½£¨¾ùÎªÊ®Áù½øÖÆÊý×Ö£©¡ª¡ª
CB PB CT CH 0B 0S 1B 1S 2B 2S 3B 3S ËµÃ÷
 1  1  1  0  1  0  0  0  0  0  0  0 1Î»Ë÷ÒýÉ«¡£½ôËõ´æ´¢
 2  2  1  0  2  0  0  0  0  0  0  0 2Î»Ë÷ÒýÉ«¡£½ôËõ´æ´¢
 4  4  1  0  4  0  0  0  0  0  0  0 4Î»Ë÷ÒýÉ«¡£½ôËõ´æ´¢
 8  8  1  0  8  0  0  0  0  0  0  0 8Î»Ë÷ÒýÉ«¡£½ôËõ´æ´¢
 1  8  1  0  1  0  7  0  0  0  0  0 1Î»Ë÷ÒýÉ«¡£À©Õ¹´æ´¢
 2  8  1  0  2  0  6  0  0  0  0  0 2Î»Ë÷ÒýÉ«¡£À©Õ¹´æ´¢
 4  8  1  0  4  0  4  0  0  0  0  0 4Î»Ë÷ÒýÉ«¡£À©Õ¹´æ´¢
 8 10  1 80  8  0  8  8  0  0  0  0 8Î»Ë÷ÒýÉ«¡£´ø8Î»alphaÍ¨µÀ
 1  1  2  0  1  0  0  0  0  0  0  0 1Î»»Ò¶ÈÉ«¡£½ôËõ´æ´¢
 2  2  2  0  2  0  0  0  0  0  0  0 2Î»»Ò¶ÈÉ«¡£½ôËõ´æ´¢
 4  4  2  0  4  0  0  0  0  0  0  0 4Î»»Ò¶ÈÉ«¡£½ôËõ´æ´¢
 8  8  2  0  8  0  0  0  0  0  0  0 8Î»»Ò¶ÈÉ«¡£½ôËõ´æ´¢
 1  8  2  0  1  0  7  0  0  0  0  0 1Î»»Ò¶ÈÉ«¡£À©Õ¹´æ´¢
 2  8  2  0  2  0  6  0  0  0  0  0 2Î»»Ò¶ÈÉ«¡£À©Õ¹´æ´¢
 4  8  2  0  4  0  4  0  0  0  0  0 4Î»»Ò¶ÈÉ«¡£À©Õ¹´æ´¢
 8 10  2 80  8  0  8  8  0  0  0  0 8Î»»Ò¶ÈÉ«¡£´ø8Î»alphaÍ¨µÀ
 C 10  3  0  4  0  4  4  4  8  4  C R4G4B4
 F 10  3  0  5  0  5  5  5  A  1  F R5G5B5A1
10 10  3  0  5  0  6  5  5  B  0  0 R5G6B5
18 18  3  0  8  0  8  8  8 10  0  0 R8G8B8
18 20  3  0  8  0  8  8  8 10  8 18 R8G8B8A8
1E 20  3  0  A  0  A  A  A 14  2 1E R10G10B10A2
30 30  3  1 10  0 10 10 10 20  0  0 R16G16B16
30 40  3  1 10  0 10 10 10 20 10 30 R16G16B16A16
30 30  3  5 10  0 10 10 10 20  0  0 R16FG16FB16F
30 40  3  5 10  0 10 10 10 20 10 30 R16FG16FB16FA16F



16Î»¸¡µãÀàÐÍ¡£GPUËùÓÃµÄOpenEXRÖÐFP16¸ñÊ½£¬·ûºÅ1Î»£¬½×Âë5Î»£¬£¨Òþº¬ÕûÊýÎ»£©Î²Êý10Î»¡£5.96*10^-8 ~ 6.41*10^4
32Î»¸¡µãÀàÐÍ¡£IEEE±ê×¼¸¡µãÀàÐÍ£¬·ûºÅ1Î»£¬½×Âë8Î»£¬£¨Òþº¬ÕûÊýÎ»£©Î²Êý23Î»¡£
64Î»¸¡µãÀàÐÍ¡£IEEE±ê×¼¸¡µãÀàÐÍ£¬·ûºÅ1Î»£¬½×Âë11Î»£¬£¨Òþº¬ÕûÊýÎ»£©Î²Êý52Î»¡£

¿ÉÒÔ²»Ö§³ÖIEEE±ê×¼ÖÐ·±ËöµÄ ·Ç¹æ¸ñ»¯Êý¡¢ÎÞÇî ¼° ·ÇÊý¡£


A 16-bit floating-point number has a 1-bit sign (S), a 5-bit exponent (E), and a 10-bit mantissa (M).
The value of a 16-bit floating-point number is determined by the following:
 (-1)^S * 0.0, if E == 0 and M == 0,
 (-1)^S * 2^-14 * (M / 2^10), if E == 0 and M != 0,
 (-1)^S * 2^(E-15) * (1 + M/2^10), if 0 < E < 31,
 (-1)^S * INF, if E == 31 and M == 0,
 or NaN, if E == 31 and M != 0,
 where S = floor((N mod 65536) / 32768), E = floor((N mod 32768) / 1024), and M = N mod 1024.
 Òò´Ëµ±E=0Ê±£¬°´·Ç¹æ·¶¸¡µãÊý´¦ÀíµÃµ½µÄ½á¹û¾Í2^-24¾«¶ÈµÄÊý

ÔÝÎ´Ö§³ÖµÄ¸ñÊ½¡ª¡ª
R11G11B10¸¡µã¡££¨DX10£©R¡¢G²ÉÓÃ11Î»¸¡µã£¬B²ÉÓÃ10Î»¸¡µã
RGB9E5¸¡µã¡££¨DX10£©R¡¢G¡¢BÊ¹ÓÃ9Î»£¨·ûºÅ+8Î»Î²Êý£©£¬¹²ÓÃ5Î»½×Âë
